// Generated by CoffeeScript 1.10.0
(function() {
  var Auth, Session, User;

  Auth = function(Requests, $q, Session) {
    var auth;
    return auth = {
      initialized: $q.defer(),
      init: function() {
        var deferred;
        deferred = $q.defer();
        Requests.get('/account/profile/').then(function(data) {
          return Session.setUser(data);
        }, function(errors) {
          return errors;
        }).then(function() {
          auth.initialized.resolve();
          return deferred.resolve(auth);
        });
        return deferred.promise;
      },
      login: function(userData) {
        var deferred;
        deferred = $q.defer();
        Requests.post('/account/login', userData).then(function(data) {
          return deferred.resolve(Session.setUser(data));
        }, function(errors) {
          return deferred.reject(errors);
        });
        return deferred.promise;
      },
      logout: function() {
        var deferred;
        deferred = $q.defer();
        Requests.get('/account/logout').then(function(data) {
          return deferred.resolve(Session.destroy());
        }, function(errors) {
          return deferred.reject(errors);
        });
        return deferred.promise;
      },
      updateUser: function(userData) {
        var deferred;
        deferred = $q.defer();
        Requests.post('/account/profile', userData).then(function(data) {
          return deferred.resolve(Session.setUser(data));
        }, function(errors) {
          return deferred.reject(errors);
        });
        return deferred.promise;
      },
      isAuthorized: function() {
        return Session.isLoggedIn();
      },
      currentUser: function() {
        return Session.getUser();
      }
    };
  };

  Auth.$inject = ['Requests', '$q', 'Session'];

  User = (function() {
    function User(data) {
      this.data = data;
    }

    User.prototype.full_name = function() {
      var ref, ref1, ref2;
      if (((ref = this.data) != null ? ref.first_name : void 0) && ((ref1 = this.data) != null ? ref1.last_name : void 0)) {
        return this.data.first_name + " " + this.data.last_name;
      }
      return (ref2 = this.data) != null ? ref2.username.toString() : void 0;
    };

    User.prototype.email = function() {
      var ref;
      return (ref = this.data) != null ? ref.email.toString() : void 0;
    };

    return User;

  })();

  Session = (function() {
    Session.$inject = [];

    function Session() {
      this.user = null;
    }

    Session.prototype.setUser = function(data) {
      if (data) {
        data = new User(data);
      }
      return this.user = data;
    };

    Session.prototype.getUser = function() {
      return this.user;
    };

    Session.prototype.destroy = function() {
      return this.setUser(null);
    };

    Session.prototype.isLoggedIn = function() {
      return this.getUser() !== null;
    };

    return Session;

  })();

  angular.module('sxTrApp').factory('Auth', Auth).service('Session', Session);

}).call(this);
